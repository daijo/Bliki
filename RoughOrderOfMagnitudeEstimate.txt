title: Rough Order of Magnitude Estimate
author: Daniel Hjort
date: 2010/11/25
location: Shanghai, China
tags: estimate, planning, repost

In the recent article [Avoiding the Infinite Abyss][1] Andy Hunt writes about how the sheer amount of choice (like any natural number of hours) can paralyze the person/team doing the estimation of a task. He suggests using a limited number of choices like 1 hour, 1 day, 3 days and a week.

This reminds me of Rough Order of Magnitude Estimates. A technique used by for example physicists to make quick and often accurate enough estimates of natural phenomena. Often this is as close you can get with out actual measurement and calculation. And if we could calculate how long a software development task would take to complete based on measurement software development would be a lot different. So stick to rough estimates. Anything else is a waste of time.

__Addendum (2011/09/18):__

I found a preceeding article by Dan North about [the perils of estimation][2].

He also adds this point:

> To compound this, it turns out that estimation is fractal. The more fine-grained you break down the requirements, the more “edges” you will discover. This means that the more detailed you estimate, the more the total will tend towards infinity, simply due to rounding errors and the fear factors that we multiply into fine grained estimates.

This is something I have noticed but not really reflected enough on.

So he takes the above even further:

> The experienced members of the team should be estimating feature sets of the order of person-weeks (or better yet, pair-weeks), not going down to the level of individual pair-days.

More effort can/should instead be put into deliberate discovery of the project risks.

__Addendum (2011/09/30):__  

Taking it yet another notch, Jørn Hunskaar, [say][3] we could just give up on estimates:

> Not giving any real value anymore, we decided to stop estimating stories. Later, when we applied Kanban, we removed the iterations as well. We’ve managed well without estimation for about eight months now, instead focusing on the flow and maximizing throughput.

Very interesting idea.

__Addendum (2013/03/22):__

Joshua Kerievsky [writes][4] about the perils of story points and the waste of overdone estimations.

He has been using variable length sprints and estimates on 'team week' level focusing more on the flow.

__Addendum (2013/04/08):__

In a tweet Jason Yip writes:

"If you say you "can't possibly estimate", I'd suggest looking up ['Fermi estimate'][5] and read [How to Measure Anything][6]."

__Addendum (2013/05/15):__

Woody Zuill wrote a [blog][7] on how some software companies perhaps can use customers need for estimates as a filter when taking on work. If the customer need an estimate they most likely also have a Waterfall mentality and might not be a good fit for an Agile shop.

[1]: http://pragprog.com/magazines/2010-11/guru-meditation
[2]: http://dannorth.net/2009/07/01/the-perils-of-estimation/
[3]: http://hunskaar.com/estimating-software-projects/
[4]: http://www.industriallogic.com/blog/stop-using-story-points/
[5]: https://en.wikipedia.org/wiki/Fermi_problem
[6]: http://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/0470539399
[7]: http://zuill.us/~WoodyZuill/2013/05/13/my-customers-need-estimates-what-do-i-do/
